# scripts/send_one.py
# Sends ONE email using the same AI/Jinja pipeline as the scheduler.
# - Uses app.ai.build_email (Gemini if configured, else Jinja fallback)
# - Hydrates context from the DB (first contact) or a dummy contact
# - Sends to a fixed TEST_TO (override below)

import asyncio
from dataclasses import dataclass
from typing import Optional

import sys, os
sys.path.append(os.path.dirname(os.path.dirname(__file__)))

from app.config import settings
from app.models import Contact
from app.emailer import send_email
from app.ai import build_email  # <-- same prompt/logic as scheduler


# ----------------------------
# CONFIGURE YOUR ONE-OFF TEST
# ----------------------------
TEST_TO = "mani.rehman1010@gmail.com"  # hardcoded recipient for testing
STEP = 0  # 0=intro, 1=follow-up1, 2=follow-up2, 3=cutoff
USE_FIRST_CONTACT_FROM_DB = True  # False => use dummy context below

# Dummy fallback (used if DB empty or USE_FIRST_CONTACT_FROM_DB=False)
@dataclass
class DummyContact:
    email: str = TEST_TO
    first_name: Optional[str] = "Veronica"
    last_name: Optional[str] = "Santiago"
    company: Optional[str] = "DeSanti"
    company_focus: Optional[str] = "engineering"


def load_contact_for_context():
    # Always return hardcoded contact for testing
    return {
        "first_name": "Veronica",
        "company": "DeSanti",
        "company_focus": "staffing & recruiting",
        "email": "veronica@desanticorp.com",  # will also show in unsub link
        "from_name": settings.FROM_NAME,
        "portfolio_url": settings.PORTFOLIO_URL,
        "cv_url": settings.CV_URL,
        "unsub_url": settings.UNSUB_BASE_URL,
    }


def build_ctx(contact: DummyContact | Contact) -> dict:
    # prefer contact email for personalization, but always SEND to TEST_TO
    contact_email = getattr(contact, "email", TEST_TO) or TEST_TO
    ctx = {
        "first_name": getattr(contact, "first_name", None),
        "company": getattr(contact, "company", None),
        "company_focus": getattr(contact, "company_focus", None),
        "email": contact_email,                   # used in unsubscribe line
        "from_name": settings.FROM_NAME,
        "portfolio_url": settings.PORTFOLIO_URL,
        "cv_url": settings.CV_URL,
        "unsub_url": settings.UNSUB_BASE_URL,
    }
    return ctx


async def main():
    contact = load_contact_for_context()
    ctx = build_ctx(contact)

    # subject/body generated by the SAME AI pipeline used in production
    subject, body = build_email(STEP, ctx)

    # Send to TEST_TO (hardcoded) so you can eyeball rendering/deliverability
    await send_email(TEST_TO, subject, body)

    # Console breadcrumbs
    print("=== ONE-OFF SEND COMPLETE ===")
    print("To:     ", TEST_TO)
    print("Step:   ", STEP)
    print("Subject:", subject)
    print("--- Body start ---")
    print(body)
    print("--- Body end ---")


if __name__ == "__main__":
    asyncio.run(main())
